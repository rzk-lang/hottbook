{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HoTT Book formalisations in Rzk","text":"<p>This project contains formalisations that follow the HoTT Book.</p>"},{"location":"#how-to-check","title":"How to check","text":"<p>From the root of the project's repository, run:</p> <pre><code>rzk typecheck src/**/*.rzk.md\n</code></pre>"},{"location":"1-foundations/0-chapter-template/01-section.rzk/","title":"0.1 Section name","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre> <p>References to the sections within the chapter should also be added to <code>mkdocs.yml</code></p>"},{"location":"1-foundations/0-chapter-template/02-section.rzk/","title":"0.2 Section name","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/0-chapter-template/exercises/0.1-solution.rzk/","title":"Solution to exercise 0.1","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/0-chapter-template/exercises/0.1-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/0-chapter-template/exercises/0.1-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/0-chapter-template/exercises/0.1-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/0-chapter-template/exercises/0.1-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/0-chapter-template/exercises/0.2-solution.rzk/","title":"Solution to exercise 0.2","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/0-chapter-template/exercises/0.2-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/0-chapter-template/exercises/0.2-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/0-chapter-template/exercises/0.2-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/0-chapter-template/exercises/0.2-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/04-dependent-function-types.rzk/","title":"1.4 Dependent function types (\\(\\Pi\\)-types)","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre> <p>A polymorphic function is one which takes a type as one of its arguments, and then acts on elements of that type (or of other types constructed from it). An example is the polymorphic identity function:</p> <pre><code>#define id\n(A : U)\n  : A \u2192 A\n  := \\ x \u2192 x\n</code></pre> <p>Another, less trivial, example of a polymorphic function is the \"swap\" operation that switches the order of the arguments of a (curried) two-argument function:</p> <pre><code>#define swap\n(A B C : U)\n  : (A \u2192 B \u2192 C) \u2192 (B \u2192 A \u2192 C)\n  := \\ f y x \u2192 f x y\n</code></pre>"},{"location":"1-foundations/1-type-theory/05-product-types.rzk/","title":"1.5 Product types","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre> <p>Rzk has built-in support for dependent pairs, so we define product types here in terms of those.</p> <pre><code>#define prod (A B : U)\n  : U\n  := \u03a3 (_ : A), B\n</code></pre> <p>To construct a pair, we can now simply use tuple syntax for \\(\\Sigma\\)-types: <code>(a, b)</code>.</p> <p>To use a pair, we can use pattern matching or introduce projections:</p> <pre><code>#define pr\u2081\n(A B : U)\n  : prod A B \u2192 A\n  := \\ (a, _b) \u2192 a\n#define pr\u2082\n(A B : U)\n  : prod A B \u2192 B\n  := \\ (_a, b) \u2192 b\n</code></pre> <p>The recursor for product types can be defined as follows:</p> <pre><code>#define prod-rec\n(A B : U)\n  : (C : U) \u2192 (A \u2192 B \u2192 C) \u2192 prod A B \u2192 C\n  := \\ C f (a, b) \u2192 f a b\n</code></pre> <p>Then instead of defining functions such as pr1 and pr2 directly by a defining equation, we could define</p> <pre><code>#define pr\u2081-via-rec\n(A B : U)\n  : prod A B \u2192 A\n  := prod-rec A B A (\\ a _b \u2192 a)\n#define pr\u2082-via-rec\n(A B : U)\n  : prod A B \u2192 B\n  := prod-rec A B B (\\ _a b \u2192 b)\n</code></pre> <p>To be able to define dependent functions over the product type, we have to generalize the recursor:</p> <pre><code>#define prod-ind\n(A B : U)\n  : (C : prod A B \u2192 U) \u2192 ((x : A) \u2192 (y : B) \u2192 C (x, y)) \u2192 (x : prod A B) \u2192 C x\n  := \\ C f (x, y) \u2192 f x y\n</code></pre> <p>For example, in this way we can prove the propositional uniqueness principle, which says that every element of <code>A \u00d7 B</code> is equal to a pair. Specifically, we can construct a function</p> <pre><code>#define prod-uniq\n(A B : U)\n  : (x : prod A B) \u2192 (pr\u2081 A B x, pr\u2082 A B x) =_{prod A B} x\n  := \\ (a, b) \u2192 refl_{(a, b)}\n</code></pre>"},{"location":"1-foundations/1-type-theory/05-product-types.rzk/#unit-type","title":"Unit type","text":"<p>Rzk has a built-in <code>Unit</code> type which behaves slightly differently from the unit type in the HoTT Book. In particular, in Rzk, uniqueness principle for the unit type is built in, making some proofs easier than in the book.</p> <p>Still, following the book, here is the recursor for the unit type:</p> <pre><code>#define Unit-rec\n  : (C : U) \u2192 C \u2192 Unit \u2192 C\n  := \\ _C c _unit \u2192 c\n</code></pre> <p>And, similarly, the induction principle for the unit type:</p> <pre><code>#define Unit-ind\n  : (C : Unit \u2192 U) \u2192 C unit \u2192 (x : Unit) \u2192 C x\n  := \\ _C c unit \u2192 c\n</code></pre> <p>Induction enables us to prove the propositional uniqueness principle for <code>Unit</code>, which asserts that its only inhabitant is <code>unit</code>:</p> <pre><code>#define Unit-uniq\n  : (x : Unit) \u2192 x = unit\n  := Unit-ind (\\ x \u2192 x = unit) refl_{unit}\n</code></pre> <p>As mentioned above, this uniqueness principle is built into Rzk (making any value of type <code>Unit</code> definitionally equal to <code>unit</code>), allowing to use <code>refl</code> immediately:</p> <pre><code>#define Unit-uniq'\n  : (x : Unit) \u2192 x = unit\n  := \\ _ \u2192 refl\n</code></pre>"},{"location":"1-foundations/1-type-theory/06-dependent-pair-types.rzk/","title":"1.6 Dependent pair types","text":"<p>This is a literate Rzk file:</p> <p>TODO</p> <p>Add proper descriptions and check for missing definitions</p> <p><pre><code>#def pr\u2081-\u03a3\n(A : U)\n(B : A -&gt; U)\n  : (\u03a3 (x : A), B x) -&gt; A\n  := \\p -&gt; first p\n#def pr\u2082-\u03a3\n(A : U)\n(B : A -&gt; U)\n  : (p : \u03a3 (x : A), B x) -&gt; (B (first p))\n  := \\p -&gt; second p\n</code></pre> Recursor for \\(\\Sigma\\)-types. They are called like this:</p> \\[ \\mathsf{rec}_{\\Sigma_{x : A}B(x)} ((C: U), (g: (x : A) \\rightarrow B (x) \\rightarrow C), (p: \\Sigma_{x : A} B(x))) \\] <pre><code>#def rec-\u03a3\n(A : U)\n(B : A -&gt; U)\n(C : U)\n  : (g : (x : A) -&gt; B x -&gt; C) -&gt; (p : \u03a3 (x : A), B x) -&gt; C\n  := \\ g (a, b) -&gt; g a b\n</code></pre> <pre><code>#def ind-\u03a3\n(A : U)\n(B : A -&gt; U)\n(C : (\u03a3 (x : A), B x) -&gt; U)\n  : (g : (x : A) -&gt; (y : B x) -&gt; C (x, y)) -&gt; (p : \u03a3 (x : A), B x) -&gt; C p\n  := \\ g (a, b) -&gt; g a b\n</code></pre>"},{"location":"1-foundations/1-type-theory/07-coproduct-types.rzk/","title":"1.7 Coproduct types","text":"<p>Warning</p> <p>Coproduct types are currently not supported in rzk.</p> <p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/08-booleans.rzk/","title":"1.8 The type of booleans","text":"<p>Warning</p> <p>Booleans are currently not supported in rzk.</p> <p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/09-natural-numbers.rzk/","title":"1.9 The natural numbers","text":"<p>Warning</p> <p>Natural numbers (and user-defined data types) are currently not supported in rzk.</p> <p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/10-pattern-matching-and-recursion.rzk/","title":"1.10 Pattern matching and recursion","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/11-propositions-as-types.rzk/","title":"1.11 Propositions as types","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/12-identity-types.rzk/","title":"1.11 Identity types","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre> <p>Induction on identity type is defined with built-in <code>idJ</code> operator:</p> <pre><code>#def path-ind\n(A : U)\n(C : (x : A) -&gt; (y : A) -&gt; (x = y) -&gt; U)\n(d : (x : A) -&gt; C x x refl)\n  : (x : A) -&gt; (y : A) -&gt; (p : x = y) -&gt; C x y p\n  := \\ x y p -&gt; idJ( A , x , C x , d x , y , p )\n</code></pre> <p>Indiscernability of identicals:</p> <pre><code>#def indiscernability-of-identicals\n(A : U)\n(C : A \u2192 U)\n  : (x : A) \u2192 (y : A) \u2192 (p : x = y) \u2192 (C x) \u2192 (C y)\n  := path-ind\n    A\n    (\\ x y p \u2192 ((C x) \u2192 (C y)))\n    (\\ x \u2192 \\ cx \u2192 cx)\n</code></pre> <p>Based path induction directly corresponds to the <code>idJ</code> operator:</p> <pre><code>#def based-path-ind\n(A : U)\n(a : A)   \n(C : (x : A) \u2192 (a = x) \u2192 U)\n(ca : C a refl)\n  : (x : A) \u2192 (p : a = x) \u2192 (C x p)\n  := \\ x p \u2192 idJ( A , a , C , ca , x , p )\n</code></pre> <p>Based path induction can be defined with the (usual) path induction:</p> <pre><code>#def based-path-ind'\n(A : U)\n  : (a : A) \u2192 \n(C : (x : A) \u2192 (a = x) \u2192 U) \u2192\n(ca : C a refl) \u2192\n(x : A) \u2192 \n(p : a = x) \u2192 \n  (C x p)\n  := \\ a C ca x p \u2192 \n  path-ind \n    A\n(\\ a' x' p' \u2192 (C' : ((x'' : A) \u2192 (a' = x'') \u2192 U)) \u2192 (C' a' refl) \u2192 (C' x' p'))\n    (\\ a' \u2192 \\ C' ca' \u2192 ca')\n    a x p C ca\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/","title":"Exercises for Section 1","text":""},{"location":"1-foundations/1-type-theory/exercises/#exercise-11","title":"Exercise 1.1","text":"<p>Given functions \\(f : A \\to B\\) and \\(g : B \\to C\\), define their composite \\(g \\circ f : A \\to C\\). Show that we have \\(h \\circ (g \\circ f) \\equiv (h \\circ g) \\circ f\\).</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-12","title":"Exercise 1.2","text":"<p>Derive the recursion principle for products \\(rec_{A \\times B}\\) using only the projections, and verify that the definitional equalities are valid. Do the same for \\(\\Sigma\\)-types.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-13","title":"Exercise 1.3","text":"<p>Derive the induction principle for products \\(ind_{A \\times B}\\), using only the projections and the propositional uniqueness principle \\(uniq_{A \\times B}\\). Verify that the definitional equalities are valid. Generalize \\(uniq_{A \\times B}\\) to \\(\\Sigma\\)-types, and do the same for \\(\\Sigma\\)-types. (This requires concepts from Chapter 2.)</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-14","title":"Exercise 1.4","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-15","title":"Exercise 1.5","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-16","title":"Exercise 1.6","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-17","title":"Exercise 1.7","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-18","title":"Exercise 1.8","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-19","title":"Exercise 1.9","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-110","title":"Exercise 1.10","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-111","title":"Exercise 1.11","text":"<p>Show that for any type \\(A\\), we have \\(\\lnot \\lnot \\lnot A \\to \\lnot A\\).</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-112","title":"Exercise 1.12","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-113","title":"Exercise 1.13","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-114","title":"Exercise 1.14","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-115","title":"Exercise 1.15","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/#exercise-116","title":"Exercise 1.16","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/1-type-theory/exercises/1.1-solution.rzk/","title":"Solution to exercise 1.1","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.1-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Exercise 1.1</p> <p>Given functions \\(f : A \\to B\\) and \\(g : B \\to C\\), define their composite \\(g \\circ f : A \\to C\\). Show that we have \\(h \\circ (g \\circ f) \\equiv (h \\circ g) \\circ f\\).</p>"},{"location":"1-foundations/1-type-theory/exercises/1.1-solution.rzk/#solution","title":"Solution","text":"<p>First, the definition of the composition operation is provided as:</p> \\[ g \\circ f :\\equiv \\lambda (x: A) . g(f(x)) \\] <p>Then, associativity can be demonstrated by evaluating both sides of the equality and reaching the same result:</p> \\[     \\begin{align*}         h \\circ (g \\circ f) &amp; \\equiv \\lambda x. h((g\\circ f)(x)) \\\\                             &amp; \\equiv \\lambda x. h((\\lambda x' . g(f(x'))) (x)) \\\\                             &amp; \\equiv \\lambda x. h(g(f(x)))     \\end{align*} \\] \\[     \\begin{align*}         (h \\circ g) \\circ f &amp; \\equiv \\lambda x. (h\\circ g)(f(x)) \\\\                             &amp; \\equiv \\lambda x. (\\lambda y . h(g(y)))(f(x)) \\\\                             &amp; \\equiv \\lambda x. h(g(f(x)))     \\end{align*} \\] <p>This can be represented in rzk like so:</p> <pre><code>#define compose\n(A B C : U)\n(g : B \u2192 C)\n(f : A \u2192 B)\n  : A \u2192 C\n  := \\ x \u2192 g (f x)\n</code></pre> <p>Associativity is automatic (by <code>refl</code>):</p> <pre><code>#define composition-associativity\n(A B C D : U)\n(f : A -&gt; B)\n(g : B -&gt; C)\n(h : C -&gt; D)\n  : compose A C D h (compose A B C g f) = compose A B D (compose B C D h g) f\n  := refl\n</code></pre> <p>An explicit proof (not checked by <code>rzk</code>):</p> <pre><code>compose A C D h (compose A B C g f)\n= \\ x \u2192 h ((compose A B C g f) x)       (unfolding compose)\n= \\ x \u2192 h ((\\ x2 \u2192 g (f x2)) x)         (unfolding compose)\n= \\ x \u2192 h (g (f x))                     (beta reduction)\n= \\ x \u2192 (\\ x2 \u2192 h (g x2)) (f x)         (beta reduction)\n= \\ x \u2192 (compose B C D h g) (f x)       (fold compose)\n= compose A B D (compose B C D h g) f   (fold compose)\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.10-solution.rzk/","title":"Solution to exercise 1.10","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.10-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.10-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.10-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.10-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.11-solution.rzk/","title":"Solution to exercise 1.11","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.11-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Exercise 1.11</p> <p>Show that for any type \\(A\\), we have \\(\u00ac\u00ac\u00acA \u2192 \u00acA\\).</p>"},{"location":"1-foundations/1-type-theory/exercises/1.11-solution.rzk/#solution","title":"Solution","text":"<p>This is a weakened version of the double negation law and it holds constructively.</p> <p>Proposition \\(\\lnot X\\) corresponds to <code>(X \u2192 \u22a5)</code> type. We are given <code>f : (((A \u2192 \u22a5) \u2192 \u22a5) \u2192 \u22a5)</code> and <code>a : A</code> and we need to construct an element of type <code>\u22a5</code>. For that, we need to apply <code>f</code> to a term of type <code>((A \u2192 \u22a5) \u2192 \u22a5)</code>.  The term <code>\\ g \u2192 g a</code> has the required type.</p> <pre><code>#def triple-neg\n(A : U)\n  : (((A \u2192 \u22a5) \u2192 \u22a5) \u2192 \u22a5) \u2192 (A \u2192 \u22a5)\n  := \\ f a \u2192 f (\\ g \u2192 g a)\n</code></pre> <p>As the solution does not involve specifics of <code>\u22a5</code> type (in particular, that anything follows from it),  it is possible to generalise the solution to an arbitrary type <code>B</code> instead of <code>\u22a5</code>.</p> <pre><code>#def triple-neg'\n(A B : U)\n  : (((A \u2192 B) \u2192 B) \u2192 B) \u2192 (A \u2192 B)\n  := \\ f a \u2192 f (\\ g \u2192 g a)\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.12-solution.rzk/","title":"Solution to exercise 1.12","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.12-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.12-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.12-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.12-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.13-solution.rzk/","title":"Solution to exercise 1.13","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.13-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.13-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.13-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.13-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.14-solution.rzk/","title":"Solution to exercise 1.14","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.14-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.14-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.14-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.14-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.15-solution.rzk/","title":"Solution to exercise 1.15","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.15-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.15-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.15-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.15-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.16-solution.rzk/","title":"Solution to exercise 1.16","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.16-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.16-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.16-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.16-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.2-solution.rzk/","title":"Solution to exercise 1.2","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.2-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Exercise 1.2</p> <p>Derive the recursion principle for products \\(\\mathsf{rec}_{A \\times B}\\) using only the projections, and verify that the definitional equalities are valid. Do the same for \\(\\Sigma\\)-types.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.2-solution.rzk/#solution-for-products","title":"Solution for products","text":"<p>In this solution, we use <code>prod</code> and projections (<code>pr\u2081</code> and <code>pr\u2082</code>), defined earlier in section 1.5.</p> <p>Introducing constructor for values of <code>prod</code> type:</p> <pre><code>#def pair\n(A B : U)\n  : A -&gt; B -&gt; prod A B\n  := \\ a b -&gt; (a, b)\n</code></pre> <p>The type of the recursor on \\(A \\times B\\) is</p> \\[ \\mathsf{rec}_{A \\times B}: \\prod_{C:\\mathcal{U}} (A \\to B \\to C) \\to A \\times B \\to C \\] <p>It can be defined using projection as such:</p> \\[ rec_{A\\times B}(C, g, x) :\\equiv g(\\mathsf{pr}_1(x))(\\mathsf{pr}_2(x)) \\] <p>And represented in rzk like so:</p> <pre><code>#def prod-rec-via-projections\n(A B : U)\n(C : U)\n(g : A -&gt; B -&gt; C)\n(p : prod A B)\n  : C\n  := g (pr\u2081 A B p) (pr\u2082 A B p)\n</code></pre> <p>Definitions of projections via recursion in the other direction (<code>pr\u2081-via-rec</code>, <code>pr\u2082-via-rec</code>) were already provided in section 1.5.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.2-solution.rzk/#checking-definitional-equalities","title":"Checking definitional equalities","text":"<p>Recursion from projections:</p> <pre><code>#def prod-rec-via-projections-works\n(A B C : U)\n(g : A -&gt; B -&gt; C)\n(a : A)\n(b : B)\n  : prod-rec-via-projections A B C g (pair A B a b) = g a b\n  := refl\n</code></pre> <p>TODO</p> <p>Write down the explicit proofs (in latex/rzk syntax)</p> <p>Projections from the recursion:</p> <pre><code>#def pr\u2081-via-rec-works\n(A B : U)\n(a : A)\n(b : B)\n  : pr\u2081-via-rec A B (pair A B a b) = a\n  := refl\n#def pr\u2082-from-rec-works\n(A B : U)\n(a : A)\n(b : B)\n  : pr\u2082-via-rec A B (pair A B a b) = b\n  := refl\n</code></pre> <p>TODO</p> <p>Write down the explicit proofs (in latex/rzk syntax)</p>"},{"location":"1-foundations/1-type-theory/exercises/1.2-solution.rzk/#solution-for-dependant-pairs","title":"Solution for dependant pairs","text":"<p>Similarly, for \\(\\Sigma\\)-types, the recursion principle has the type:</p> \\[ \\mathsf{rec}_{\\Sigma_{x:A}B(x)} : \\Pi_{C:U}(\\Pi_{x:A} B(x) \\to C) \\to (\\Sigma_{x:A} B(x)) \\to C \\] <p>and can be defined using the projection functions as such:</p> \\[ \\mathsf{rec}_{\\Sigma_{x:A}B(x)}(C, g, x) :\\equiv g(\\mathsf{pr}_1(x))(\\mathsf{pr}_2(x)) \\] <p>\\(\\Sigma\\)-types are built-in. Also, <code>pr\u2081-\u03a3</code>, <code>pr\u2082-\u03a3</code>, <code>rec-\u03a3</code>, <code>ind-\u03a3</code> were already defined in section 1.6.</p> <p>Defining recursion from <code>pr\u2081-\u03a3</code> and <code>pr\u2082-\u03a3</code>:</p> <pre><code>#def rec-\u03a3-via-projections\n(A : U)\n(B : A -&gt; U)\n(C : U)\n(g : (x : A) -&gt; B x -&gt; C)\n(p : \u03a3 (x : A), B x)\n  : C\n  := g (pr\u2081-\u03a3 A B p) (pr\u2082-\u03a3 A B p)\n</code></pre> <p>(Extra, not in the task) Other direction of definition (projecitons via recursion):</p> <pre><code>#def pr\u2081-\u03a3-via-rec\n(A : U)\n(B : A -&gt; U)\n  : (\u03a3 (x : A), B x) -&gt; A\n  := rec-\u03a3 A B A (\\ x y -&gt; x)\n</code></pre> <p>For the second projection (\\(\\mathsf{pr}_2\\)) we need the induction, since the output type depends on \\(x : A\\):</p> <pre><code>#def pr\u2082-\u03a3-via-rec\n(A : U)\n(B : A -&gt; U)\n  : (p : \u03a3 (x : A), B x) -&gt; (B (pr\u2081-\u03a3-via-rec A B p))\n  := ind-\u03a3 A B (\\ p1 -&gt; B (pr\u2081-\u03a3-via-rec A B p1)) (\\ x y -&gt; y)\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.2-solution.rzk/#checking-the-definitional-equalities","title":"Checking the definitional equalities","text":"<pre><code>#def rec-\u03a3-via-projections-works\n(A : U)\n(B : A -&gt; U)\n(C : U)\n(g : (x : A) -&gt; B x -&gt; C)\n(a : A)\n(b : B a)\n  : rec-\u03a3-via-projections A B C g (a, b) = g a b\n  := refl\n#def pr\u2081-\u03a3-via-rec-works\n(A : U)\n(B : A -&gt; U)\n(a : A)\n(b : B a)\n  : pr\u2081-\u03a3-via-rec A B (a, b) = a\n  := refl\n#def pr\u2082-\u03a3-via-rec-works\n(A : U)\n(B : A -&gt; U)\n(a : A)\n(b : B a)\n  : pr\u2082-\u03a3-via-rec A B (a, b) = b\n  := refl\n</code></pre> <p>TODO</p> <p>Write down the explicit proofs (in latex/rzk syntax)</p>"},{"location":"1-foundations/1-type-theory/exercises/1.3-solution.rzk/","title":"Solution to exercise 1.3","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.3-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Derive the induction principle for products \\(ind_{A \\times B}\\), using only the projections and the propositional uniqueness principle \\(uniq_{A \\times B}\\). Verify that the definitional equalities are valid. Generalize \\(uniq_{A \\times B}\\) to \\(\\Sigma\\)-types, and do the same for \\(\\Sigma\\)-types. (This requires concepts from Chapter 2.)</p>"},{"location":"1-foundations/1-type-theory/exercises/1.3-solution.rzk/#solution","title":"Solution","text":""},{"location":"1-foundations/1-type-theory/exercises/1.4-solution.rzk/","title":"Solution to exercise 1.4","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.4-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.4-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.4-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.4-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.5-solution.rzk/","title":"Solution to exercise 1.5","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.5-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.5-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.5-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.5-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.6-solution.rzk/","title":"Solution to exercise 1.6","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.6-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.6-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.6-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.6-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.7-solution.rzk/","title":"Solution to exercise 1.7","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.7-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.7-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.7-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.7-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.8-solution.rzk/","title":"Solution to exercise 1.8","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.8-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.8-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.8-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.8-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.9-solution.rzk/","title":"Solution to exercise 1.9","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/1-type-theory/exercises/1.9-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.9-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.9-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/1-type-theory/exercises/1.9-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/01-types-are-higher-groupoids.rzk/","title":"2.1 Types are higher groupoids","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/02-functions-are-functors.rzk/","title":"2.2 Functions are functors","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/03-type-families-are-fibrations.rzk/","title":"2.3 Type families are fibrations","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/04-homotopies-are-equivalences.rzk/","title":"2.4 Homotopies are equivalences","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/05-the-higher-groupoid-structure-of-type-formers.rzk/","title":"2.5 The higher groupoid structure of type formers","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/06-cartesian-product-types.rzk/","title":"2.6 Cartesian product types","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/07-sigma-types.rzk/","title":"2.7 \\(\\Sigma\\)-types","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/08-the-unit-type.rzk/","title":"2.8 The unit type","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/09-pi-types-and-function-extensionality.rzk/","title":"2.9 \\(\\Pi\\)-types and the function extensionality axiom","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/10-universes-and-univalence-axiom.rzk/","title":"2.10 Universes and univalence axiom","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/11-identity-type.rzk/","title":"2.11 Identity type","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/12-coproducts.rzk/","title":"2.12 Coproducts","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/13-natural-numbers.rzk/","title":"2.13 Natural numbers","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/14-example-equality-of-structures.rzk/","title":"2.14 Example: equality of structures","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/15-universal-properties.rzk/","title":"2.15 Universal properties","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/","title":"Exercises for Section 2","text":""},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-21","title":"Exercise 2.1","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-22","title":"Exercise 2.2","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-23","title":"Exercise 2.3","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-24","title":"Exercise 2.4","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-25","title":"Exercise 2.5","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-26","title":"Exercise 2.6","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-27","title":"Exercise 2.7","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-28","title":"Exercise 2.8","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-29","title":"Exercise 2.9","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-210","title":"Exercise 2.10","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-211","title":"Exercise 2.11","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-212","title":"Exercise 2.12","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-213","title":"Exercise 2.13","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-214","title":"Exercise 2.14","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-215","title":"Exercise 2.15","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-216","title":"Exercise 2.16","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-217","title":"Exercise 2.17","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/#exercise-218","title":"Exercise 2.18","text":"<p>Warning</p> <p>Description is missing.</p> <p>Go to solution</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.1-solution.rzk/","title":"Solution to exercise 2.1","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.1-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Show that the three obvious proofs of Lemma 2.1.2 are pairwise equal.</p> <p>Lemma 2.1.2: (note we use \\(\\circ\\) instead of square dot due to technical limitations)</p> <p>For every type \\(A\\) and every \\(x, y, z : A\\) there is a function</p> \\[ (x = y) \\rightarrow (y = z) \\rightarrow (x = z), \\] <p>written \\(p \\mapsto q \\mapsto p \\circ q\\), such that \\(\\text{refl}_x \\circ \\text{refl}_x \\equiv \\text{refl}_x\\) for any \\(x : A\\). We call \\(p \\circ q\\) the concatenation or composite of \\(p\\) and \\(q\\).</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.1-solution.rzk/#solution","title":"Solution","text":""},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.10-solution.rzk/","title":"Solution to exercise 2.10","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.10-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.10-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.10-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.10-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.11-solution.rzk/","title":"Solution to exercise 2.11","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.11-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.11-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.11-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.11-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.12-solution.rzk/","title":"Solution to exercise 2.12","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.12-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.12-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.12-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.12-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.13-solution.rzk/","title":"Solution to exercise 2.13","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.13-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.13-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.13-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.13-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.14-solution.rzk/","title":"Solution to exercise 2.14","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.14-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.14-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.14-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.14-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.15-solution.rzk/","title":"Solution to exercise 2.15","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.15-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.15-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.15-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.15-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.16-solution.rzk/","title":"Solution to exercise 2.16","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.16-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.16-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.16-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.16-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.17-solution.rzk/","title":"Solution to exercise 2.17","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.17-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.17-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.17-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.17-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.18-solution.rzk/","title":"Solution to exercise 2.18","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.18-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.18-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.18-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.18-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.2-solution.rzk/","title":"Solution to exercise 2.2","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.2-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.2-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.2-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.2-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.3-solution.rzk/","title":"Solution to exercise 2.3","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.3-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.3-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.3-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.3-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.4-solution.rzk/","title":"Solution to exercise 2.4","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.4-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.4-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.4-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.4-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.5-solution.rzk/","title":"Solution to exercise 2.5","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.5-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.5-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.5-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.5-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.6-solution.rzk/","title":"Solution to exercise 2.6","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.6-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.6-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.6-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.6-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.7-solution.rzk/","title":"Solution to exercise 2.7","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.7-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.7-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.7-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.7-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.8-solution.rzk/","title":"Solution to exercise 2.8","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.8-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.8-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.8-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.8-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.9-solution.rzk/","title":"Solution to exercise 2.9","text":"<p>This is a literate Rzk file:</p> <pre><code>#lang rzk-1\n</code></pre>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.9-solution.rzk/#problem-statement","title":"Problem statement","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.9-solution.rzk/#solution-part-1","title":"Solution (part 1)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.9-solution.rzk/#solution-part-2","title":"Solution (part 2)","text":"<p>Warning</p> <p>To be done.</p>"},{"location":"1-foundations/2-homotopy-type-theory/exercises/2.9-solution.rzk/#solution-part","title":"Solution (part ...)","text":"<p>Warning</p> <p>To be done.</p>"}]}